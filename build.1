.\" The build tool manpage
.\" Copyright (C) 2022 bellrise
.\"
.\" The source of this tool can be found at:
.\" <https://github.com/bellrise/build>
.\"
.TH "BUILD" "1" "2022-01-22" "bellrise" "Build system"

.SH NAME
.PP
build \- Minimal build system


.SH SYNOPSIS
.PP
\fBbuild\fP [-efhsv] [target]


.SH DESCRIPTION
.PP
\fBbuild\fP is a minimal build system, with the main design goal being
simplicity, while still being familiar and easy to learn.

This manpage is for \fBbuild\fP version 5.


.SH OPTIONS
.PP
\fB\-e\fP
  Explain what is going on while building the project.

\fB\-f <file>\fP
  Path to a different buildfile. Note that this also changes the working
  directory of the build tool. For example, if you run "build -f project/buildfile"
  it will first change the working directory to "./project", and then run
  the buildfile from there.

\fB\-h\fP
  Show the help page.

\fB\-s\fP
  Do not compile, end after setup and buildfile parsing.

\fB\-v\fP
  Show the version number. This is always a single integer number so you may
  compare the value in scripts if you require any perticular feature.

\fBtarget\fP
  Name of the target to call. A target is defined in the buildfile and prefixed
  with a "@" sign. Read more in the \fBBUILDFILE TARGET\fP section.


.SH BUILDFILE
.PP
In order to build a project a \fBbuildfile\fP is required. The buildfile may
be empty. The buildfile is parsed based on newlines, so each line represents
a different option. This is the list of possible options a buildfile can have:

\fBcc\fP
  Name of the compiler to use. (default: c99)

\fBsrc\fP
  Source files. Each source file is whitespace seperated. You may also use
  a wildcard (any string with a *), which uses the `find` tool. Prefix a file
  name with "!" to exclude it from the sources list. Leaving this option empty
  will stop the compilation process. First, the wildcards get expanded and only
  then the files will be excluded. This means that you can "compile everything
  apart from test.c" using: `src *.c !test.c`. (default: *.c)

\fBflags\fP
  Flags to pass to the compiler.

\fBout\fP
  Output file name. This will not create any directories, so you should create
  them by yourself or with a script linked to @before. (default: program)

\fBbuilddir\fP
  The name of the temporary build directory where all object files will be
  placed into, which then will be linked together into one binary.
  (default: builddir)


.SH BUILDFILE EXAMPLE
.PP
Let's say we have a couple of .c files, we want to compile with clang and with
-O2 optimization. The created binary should be called "my_program".

    cc      clang
    flags   -O2
    out     my_program


.SH BUILDFILE TARGET
.PP
A \fBtarget\fP is a custom option that runs a outside script. It can be created
by prefixing a keyword with an "@" sign. For example, to create an installation
target which calls a certain install.sh you may add this line to your buildfile:

    @install install.sh

Then call the target with "build install".

.SH EXIT STATUS
\fB0\fP \- normal exit

\fB1\fP \- missing command line argument

\fB2\fP \- buildfile not found

\fB3\fP \- popen failed
