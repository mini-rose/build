.\" The build tool manpage
.\" Copyright (C) 2022 bellrise
.\"
.\" The source of this tool can be found at:
.\" <https://github.com/bellrise/build>
.\"
.TH "BUILD" "1" "2022-01-22" "bellrise" "Build system"

.SH NAME
.PP
build \- Minimal build system


.SH SYNOPSIS
.PP
\fBbuild\fP [-chv] [target]


.SH DESCRIPTION
.PP
\fBbuild\fP is a minimal build system for easily compiling C projects (or
other, if you want to try). It's main goal is to be as clean and as simple
as possible, while still being familiar to already existing build systems
like GNU make. It's designed to easily integrate with a shell script, which
will execute at certain times, like @after or @before the build tool runs.

This manpage is for \fBbuild\fP version 3.


.SH OPTIONS
.PP
\fB\-c\fP
  Output commands to stdout while executing them.

\fB\-h\fP
  Show the help page.

\fB\-v\fP
  Show the version number. This is always a single integer number so you may
  compare the value in scripts if you require any perticular feature.

\fBtarget\fP
  Name of the target to call. A target is defined in the buildfile and prefixed
  with a "@" sign. Read more in the \fBBUILDFILE-TARGET\fP section.


.SH BUILDFILE
.PP
In order to build a project a \fBbuildfile\fP is required. The buildfile may
even be empty, as long as it's there it tells the build tool that this is a
project it may compile. A \fBbuildfile\fP consists of 2 types of lines:
a comment or an option line. The latter contains a keyword and some value
which is split from the keyword with atleast a single whitespace. With this
syntax a buildfile can stay clean and readable.

.PP
This is the list of possible options a \fBbuildfile\fP can have:

\fBcc\fP
  Name of the compiler to use. (default: c99)

\fBsrc\fP
  List of sources. Apart from regular filenames, you may use a wildcard which
  compares anything with the same file extension. For example, if you want all
  C files you can use "*.c". All filenames are space-seperated.

\fBflags\fP
  Flags to pass to the compiler. Note that include directories should be added
  using the \fIinclude\fP option.

\fBinclude\fP
  A list of directories to include using the -I flag. (default: include or inc)

\fBout\fP
  Output file name. This will not create any directories, so you should create
  them by yourself or with a script linked to @before. (default: program)

\fBbuilddir\fP
  The name of the temporary build directory where all object files will be
  placed into, which then will be linked together into one binary.
  (default: builddir)


.SH BUILDFILE-EXAMPLE
.PP
Let's say we have a couple of .c files, we want to compile with clang and with
-O2 optimization. The created binary should be called "my_program".

    cc      clang
    flags   -O2
    out     my_program


.SH BUILDFILE-TARGET
.PP
A \fBtarget\fP is a custom option that runs a outside script. It can be created
by prefixing a keyword with an "@" sign. For example, to create an installation
target which calls a certain install.sh you may add this line to your buildfile:

    @install install.sh

Then call the target with "build install".
