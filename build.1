.\" The build tool manpage
.\" Copyright (c) 2022 mini-rose
.\"
.\" The source of this tool can be found at:
.\" <https://github.com/mini-rose/build>
.\"
.TH "BUILD" "1" "2022-01-22" "mini-rose" "Build tool"

.SH NAME
.PP
build \- Minimal build tool


.SH SYNOPSIS
.PP
\fBbuild\fP [-efhsv] [target]


.SH DESCRIPTION
\fBbuild\fP is a minimal build tool, designed to be simple, while still being
familiar and easy to learn.

This manpage is for \fBbuild\fP version 8.


.SH OPTIONS
.PP
\fB\-e\fP
  Explain what is going on while building the project.

\fB\-f <file>\fP
  Path to a different buildfile. Note that this also changes the working
  directory of the build tool. For example, if you run "build -f project/buildfile"
  it will first change the working directory to "./project", and then run
  the buildfile from there.

\fB\-h\fP
  Show the help page.

\fB\-s\fP
  Do not compile, end after setup and buildfile parsing.

\fB\-j <n>\fP
  Compile on `n` threads (default: cpu count). You may only use up to 64 threads,
  because any more would just slow it down.

\fB\-v\fP
  Show the version number. This is always a single integer number so you may
  compare the value in scripts if you require any perticular feature.

\fBtarget\fP
  Name of the target to call. A target is defined in the buildfile and prefixed
  with a "@" sign. Read more in the \fBBUILDFILE TARGET\fP section.


.SH BUILDFILE
In order to build a project a \fBbuildfile\fP is required. The buildfile may
be empty. The buildfile is parsed based on newlines, so each line represents
a different option. This is the list of possible options a buildfile can have:

\fBcc\fP
  Name of the compiler to use. (default: c99)

\fBsrc\fP
  List of source files, each file is space separated. Apart from regular paths
  you may also define wildcards and excluded files. Wildcards are paths with
  asterisks instead of the filenames. For example, "*.c" means any file that
  ends with ".c", recursive from the root location. Depending on the syntax,
  different items may be found. Because the official implementation of the
  build tool uses `find` to locate files, it is used to provide examples of how
  certain wildcards will be compiled.

  Assuming that '$W' is the wildcard path, the compiled `find` command would
  look like this: "find $(dirname $W) -type f -name $(basename $W)".

  After expanding all wildcards, the buildfile parser does a second pass
  selecting all paths prefixed with a "!" to be removed from the path list.
  Exclude paths do NOT have a wildcard functionality, they can only exclude
  single files or whole directories. If you want to cherry pick excluded files,
  it has to be done by single file paths. For example, "*.c !test.c" means that
  all files ending with ".c" will be selected, and test.c will be excluded.

  Because of the double pass system, the excluded paths do not have to be after
  the wildcards. As for excluding directories, the path to the directory must
  end with a "/". For example, "!test" will exclude a file named test while
  "!test/" will exclude a directory named test.

\fBflags\fP
  Flags to pass to the compiler.

\fBout\fP
  Output file name. This will not create any directories, so you should create
  them by yourself or with a script linked to @before. (default: program)

\fBbuilddir\fP
  The name of the temporary build directory where all object files will be
  placed into, which then will be linked together into one binary.
  (default: builddir)


.SH BUILDFILE EXAMPLE
Let's say we have a couple of .c files, we want to compile with clang and with
-O2 optimization. The created binary should be called "my_program".

    cc      clang
    flags   -O2
    out     my_program


.SH BUILDFILE TARGET
A \fBtarget\fP is a custom option that runs a shell command. It can be created
by prefixing a keyword with an "@" sign. For example, to create an installation
target which calls a certain install.sh you may add this line to your buildfile:

    @install sh install.sh

Then call the target with "build install".

If you select a target on the command line, \fBonly that target will be ran\fP,
and the project will not continue compiling. You may also create special targets
in your buildfile that work like "hooks", they automatically get executed at
certain points of the build process and do not get blocked if the user defines
a target.

\fB@__default\fP
  If this target is defined, running "build" will _only_ call that target,
  disabling the compilation & linking stages. Note that __setup & __finish
  will still be called.

\fB@__setup\fP
  Ran before anything else happens.

\fB@__finish\fP
  Ran after everything has finished.


.SH EXIT STATUS
\fB0\fP \- normal exit

\fB1\fP \- missing command line argument

\fB2\fP \- buildfile not found

\fB3\fP \- popen failed

\fB4\fP \- unknown target

\fB5\fP \- failed to create thread
