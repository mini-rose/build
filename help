buildfile spec
==============

The buildfile is used to pass information to the `build` tool in order to
change the default compilation values, like the compiler or binary name.

Currently there is a very limited amount of options to choose from, but it
will be extended over time.


Syntax
------

There can only be 3 types of lines: an empty line, a line with a comment and
a option line. If a single whitespace character will be found at the beginning
of the line, it is considered an empty line.

The option line contains a single keyword, atleast one whitespace character,
and atleast one value. This can be expressed in a regex like so:

    /^(?<keyword>\w+)\s+(?<values>[\w-].*)$/


Options
-------

cc
    Path to the compiler to use. (default: cc)

flags
    Flags to compile with, note that include directories should be defined
    using `include`, not with `flags`.

vendor
    Additional source files, which do not replace the default glob for all *.c
    files.

out
    Output file name. This does not create any directories, so you should
    create the build folder yourself if you want. (default: program)

builddir
    The name of the temporary build directory where all object files will be
    placed into, which then will be linked together into one binary.
    (default: builddir)

include
    A list of directories to include using the -I flags for the compiler.
    (default: include or inc (if exists))


Example buildfile
-----------------

Let's say we have a couple of .c files, we want to compile with clang and with
-O2 optimization, along with some warning flags, and the output file would be
'my_program'. We also have a include directory strangely named `headers`.

    # buildfile

    cc          clang
    flags       -O2 -Wall -Wextra
    include     headers
    out         my_program
